<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body_p</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerXStart = x;
playerYStart = y;
moveSpeed = 0.5;
canMove = true;
fire = 0;
turretAngle = 0;
bodyAngle = 0;
displayTurretAngle = 0;
displayBodyAngle = 0;

xPrev = x;
yPrev = y;
xTo = x;
yTo = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while (!place_free(playerXStart,playerYStart)) {
    print("Respawning: "+string(x)+","+string(y));
    playerXStart = (irandom(room_width) div gridSize)*gridSize;
    playerYStart = (irandom(room_height) div gridSize)*gridSize;
}
x = playerXStart;
y = playerYStart;
maxReloadTime = 90;
health = 10;
lives--;
canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fire &lt; 0) {fire += 0.1;}
/*if ((xTo == x) &amp;&amp; (yTo == y)) {
    if ((xPrev != xTo) || (yPrev != yTo)) {
        mp_grid_clear_cell(mpGrid,xPrev div gridSize,yPrev div gridSize);
        xPrev = x;
        yPrev = y;
    }
    if (mp_grid_get_cell(mpGrid,xTo div gridSize,yTo div gridSize) == -1) {
        xTo = x;
        yTo = y;
    }
    else {
        mp_grid_add_cell(mpGrid,xTo div gridSize,yTo div gridSize);
    }
}*/
if (place_meeting(x,y,obj_enemy_parent)) {
    while (!place_free(playerXStart,playerYStart)) {
        print("Collision: "+string(x)+","+string(y));
        playerXStart = (irandom(room_width) div gridSize)*gridSize;
        playerYStart = (irandom(room_height) div gridSize)*gridSize;
    }
}
if (canMove) {
    if (health &lt;= 4) {
        part_particles_create(smokeSystem,x+4+(irandom(2)*choose(-1,1)),y+4+(irandom(2)*choose(-1,1)),smokeType,1);
    }
    /*************** BODY **************/
    if (place_snapped(gridSize,gridSize)) {
        if ((x != xPrev) || (y != xPrev)) {
            mp_grid_clear_cell(mpGrid,xPrev div gridSize,yPrev div gridSize);
            xPrev = x;
            yPrev = y;
        }
        speed = 0;
        var a = sin(degtorad(displayBodyAngle));
        if (keyboard_check(ord("A"))) {
            if (a == 0 &amp;&amp; direction == 180) { 
                if (place_free(x-moveSpeed-1,y)) {
                    speed = moveSpeed;
                }
            }
            direction = 180;
        }
        else if (keyboard_check(ord("D"))) {
            if (a == 0 &amp;&amp; direction == 0) { 
                if (place_free(x+moveSpeed+1,y)) {
                    speed = moveSpeed;
                }
            }
            direction = 0;
        }
        else if (keyboard_check(ord("W"))) {
            if (a == 1 &amp;&amp; direction == 90) {
                if (place_free(x,y-moveSpeed-1)) {
                    speed = moveSpeed;
                }
            }
            direction = 90;
        }
        else if (keyboard_check(ord("S"))) {
            if (a == -1 &amp;&amp; direction == 270) { 
                if (place_free(x,y+moveSpeed+1)) {
                    speed = moveSpeed;
                }
            }
            direction = 270;
        }
        if (mp_grid_get_cell(mpGrid,x div gridSize,y div gridSize) != -1) {
            mp_grid_add_cell(mpGrid,x div gridSize,y div gridSize);
        }
        if (speed &gt; 0) {
            var xCur = (x) div gridSize;
            var yCur = (y) div gridSize;
            var xx = xCur+(cos(degtorad(direction))*sign(speed));
            var yy = yCur-(sin(degtorad(direction))*sign(speed));
            if(mp_grid_get_cell(mpGrid,xx,yy) != -1) {
                mp_grid_add_cell(mpGrid,xx,yy);
            }
        }
    }
    else {
        speed = moveSpeed;
        place_snapped(gridSize,gridSize);
    }
    var image_ad = angle_difference(direction,displayBodyAngle);
    displayBodyAngle += sign(image_ad)*2;
    if (speed &gt; 0 || abs(image_ad) &gt; 0) {
        image_index += 0.5;
    }
    /*************** turret **************/
    if (keyboard_check_pressed(vk_left)) {
        turretAngle = 180;
    }
    if (keyboard_check_pressed(vk_right)) {
        turretAngle = 0;
    }
    if (keyboard_check_pressed(vk_up)) {
        turretAngle = 90;
    }
    if (keyboard_check_pressed(vk_down)) {
        turretAngle = 270;
    }
    var ad = angle_difference(turretAngle,displayTurretAngle);
    displayTurretAngle += sign(ad)*3;
    /*************** FIRE **************/
    if (!reload) {
        if (keyboard_check(vk_space)) {
            switch(ammoType) {
                case 0:
                    fireShell();
                    break;
                case 1:
                    if (ammo &gt; 0) {
                        fireShell();
                    }
                    break;
            }
        }
    }
}
else {
    if (!place_snapped(gridSize,gridSize)) {
        place_snapped(gridSize,gridSize);
    }
    else {
        speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other) {
    instance_destroy();
}
var ind = instance_create(x+(sprite_width/2),y+(sprite_height/2),obj_dmg_inc);
ind.damage = 250;
ind.size = 1;
ind.wait = -30;

score += 250;
switch(other.image_index) {
    case 0: 
        ammo += min(5,maxAmmo-ammo);
        break;
    case 1:
        maxReloadTime *= 0.8;
        break;
    case 2:
        lives ++;
        health = 10;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_shell">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damage = 2+other.baseDamage;
hitIndAngle = point_direction(x+4,y+4,other.x,other.y);
hitIndAlpha = 1;
if (canMove) {
    if (health &gt; 0) {
        health -= damage;
    }
    else {
        canMove = false;
        audio_play_sound(explodeDeadSound,1,false);
        alarm[0] = 180;
        repeat (5) part_particles_create(explosionSystem,x+irandom(sprite_width),y+irandom(sprite_height),explosionType,1);
    }
}
with(other) {
    part_particles_create(explosionSystem,x,y,explosionType,1);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var displayColor = green
if (!canMove) {
    displayColor = make_colour_hsv(colour_get_hue(displayColor),colour_get_saturation(displayColor),colour_get_value(displayColor)*0.5);
}
draw_sprite_ext(spr_tank_body,image_index,x+(sprite_width/2),y+(sprite_height/2),1,1,displayBodyAngle,displayColor,1);
var xx, yy;
xx = lengthdir_x(fire,displayTurretAngle);
yy = lengthdir_y(fire,displayTurretAngle);
draw_sprite_ext(spr_tank_turret,0,x+(sprite_width/2)+xx,y+(sprite_height/2)+yy,1,1,displayTurretAngle,displayColor,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
