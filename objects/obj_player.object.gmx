<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body_p</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveSpeed = 0.5;
canMove = true;
fire = 0;
turrentAngle = 0;
bodyAngle = 0;
displayTurrentAngle = 0;
displayBodyAngle = 0;

xPrev = x;
yPrev = y;
xTo = x;
yTo = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fire &lt; 0) {fire += 0.1;}
/*if ((xTo == x) &amp;&amp; (yTo == y)) {
    if ((xPrev != xTo) || (yPrev != yTo)) {
        mp_grid_clear_cell(mpGrid,xPrev div gridSize,yPrev div gridSize);
        xPrev = x;
        yPrev = y;
    }
    if (mp_grid_get_cell(mpGrid,xTo div gridSize,yTo div gridSize) == -1) {
        xTo = x;
        yTo = y;
    }
    else {
        mp_grid_add_cell(mpGrid,xTo div gridSize,yTo div gridSize);
    }
}*/
if (canMove) {
    /*************** BODY **************/
    if (place_snapped(gridSize,gridSize)) {
        if (((x div gridSize) != xPrev) || ((y div gridSize) != xPrev)) {
            mp_grid_clear_cell(mpGrid,xPrev div gridSize,yPrev div gridSize);
            xPrev = x;
            yPrev = y;
        }
        speed = 0;
        var a = sin(degtorad(displayBodyAngle));
        if (keyboard_check(ord("A"))) {
            direction = 180;
            if (a == 0) { 
                if (place_free(x-moveSpeed-3,y)) {
                    speed = moveSpeed;
                }
            }
        }
        if (keyboard_check(ord("D"))) {
            direction = 0;
            if (a == 0) { 
                if (place_free(x+moveSpeed+3,y)) {
                    speed = moveSpeed;
                }
            }
        }
        if (keyboard_check(ord("W"))) {
            direction = 90;
            if (a == 1) {
                if (place_free(x,y-moveSpeed-3)) {
                    speed = moveSpeed;
                }
            }
        }
        if (keyboard_check(ord("S"))) {
            direction = 270;
            if (a == -1) { 
                if (place_free(x,y+moveSpeed+3)) {
                    speed = moveSpeed;
                }
            }
        }
        if (mp_grid_get_cell(mpGrid,x div gridSize,y div gridSize) != -1) {
            mp_grid_add_cell(mpGrid,x div gridSize,y div gridSize);
        }
        var image_ad = angle_difference(direction,displayBodyAngle);
        displayBodyAngle += sign(image_ad)*2;
        print(speed);
        if (speed &gt; 0 || abs(image_ad) &gt; 0) {
            if (speed &gt; 0) {
                var xCur = x div gridSize;
                var yCur = y div gridSize;
                var xx = cos(degtorad(direction));
                var yy = sin(degtorad(direction));
                if(mp_grid_get_cell(mpGrid,xCur+xx,yCur-yy) != -1) {
                    mp_grid_add_cell(mpGrid,xCur+xx,yCur-yy);
                }
            }
            image_index += 0.5;
        }
    }
    else {
        speed = moveSpeed;
        place_snapped(gridSize,gridSize);
    }
    /*************** TURRENT **************/
    if (keyboard_check_pressed(vk_left)) {
        turrentAngle = 180;
    }
    if (keyboard_check_pressed(vk_right)) {
        turrentAngle = 0;
    }
    if (keyboard_check_pressed(vk_up)) {
        turrentAngle = 90;
    }
    if (keyboard_check_pressed(vk_down)) {
        turrentAngle = 270;
    }
    var ad = angle_difference(turrentAngle,displayTurrentAngle);
    displayTurrentAngle += sign(ad)*3;
    /*************** FIRE **************/
    if (!reload) {
        if (ammo &gt; 0) {
            if (keyboard_check(vk_space)) {
                var t_a = sin(degtorad(displayTurrentAngle));
                var t_d = sin(degtorad(turrentAngle));
                if (t_a == t_d) {
                    reload = true;
                    ammo--;
                    fire -= 2;
                    var shell = instance_create(x+(sprite_width/2),y+(sprite_height/2),obj_shell);
                    shell.direction = displayTurrentAngle;
                    shell.image_angle = displayTurrentAngle;
                    shell.speed = 10;
                }
            }
        }
    }
}
else {
    if (!place_snapped(gridSize,gridSize)) {
        place_snapped(gridSize,gridSize);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_shell">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x1 = (x+(sprite_width/2))-other.x;
var y1 = (y+(sprite_height/2))-other.y;
var x2 = lengthdir_x(1,direction);
var y2 = lengthdir_y(1,direction);
var adist = sqrt(sqr(x1)+sqr(y1));
var bdist = sqrt(sqr(x2)+sqr(y2));
var angle = arccos(dot_product(x1,y1,x2,y2)/max(1,adist*bdist))/pi;
damage = 2-angle

with(other) {
    part_particles_create(explosionSystem,x,y,explosionType,1);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_tank_body,image_index,x+(sprite_width/2),y+(sprite_height/2),1,1,displayBodyAngle,green,1);
var xx, yy;
xx = lengthdir_x(fire,displayTurrentAngle);
yy = lengthdir_y(fire,displayTurrentAngle);
draw_sprite_ext(spr_tank_turrent,0,x+(sprite_width/2)+xx,y+(sprite_height/2)+yy,1,1,displayTurrentAngle,green,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
